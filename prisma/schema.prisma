// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  onboarding_complete Boolean   @default(false)

  Listing Listing[]
}

model Listing {
  id                Int       @id @default(autoincrement())
  mainImage         Json?
  brandImage        Json?
  category          String?
  type              String?
  employeeName      String?
  listType          String?
  subCategoryOne    String?
  subCategoryTwo    String?
  floorPrice        Int?
  maxPrice          Int?
  dataSource        String?
  isAuctioned       Boolean   @default(false)
  price             Int?
  auctionTime       Int?
  auctionFloorPrice Int?
  auctionMaxPrice   Int?
  delivery          String?
  matches           Boolean   @default(false)
  isLiked           Boolean   @default(false)
  isUnLiked         Boolean   @default(false)
  tags              String[]
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  User              User?     @relation(fields: [userId], references: [id])
  userId            String?
}

model Sale {
  id              Int       @id @default(autoincrement())
  name            String
  items           String[]
  discount_amount String
  start_date      DateTime
  end_date        DateTime
  is_liked        Boolean   @default(false)
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}
