generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  onboardingComplete Boolean   @default(false)
  accounts           Account[]
  business           Business?
  consumer           Consumer?
  sessions           Session[]
}

model Business {
  id                    String                       @id @default(uuid())
  uid                   String                       @unique
  tinyUrl               String?                      @unique
  businessName          String
  email                 String                       @unique
  businessState         String
  businessCity          String
  businessStreet        String
  businessZip           String
  url                   String?
  phoneNumber           String?
  squareAccessToken     String?
  squareRefreshToken    String?
  squareTokenIssueDate  DateTime?
  user                  User                         @relation(fields: [uid], references: [id])
  emailPreferences      EmailPreferences?
  LiquidationThresholds LiquidationThreshold[]
  listings              Listing[]
  listingQueue          ListingQueue?
  performanceMetrics    PerformanceMetricsVariables?
  pricingRules          PricingRule[]
  followedBy            Follow[]
}

model Consumer {
  id               String            @id @default(uuid())
  uid              String            @unique
  username         String
  email            String            @unique
  emailAlertsOn    Boolean           @default(true)
  user             User              @relation(fields: [uid], references: [id])
  emailPreferences EmailPreferences?
  ThriftList       ThriftList[]
  votes            Vote[]
  following        Follow[]
}

model Follow {
  id         String   @id @default(uuid())
  businessId String
  consumerId String
  business   Business @relation(fields: [businessId], references: [id])
  consumer   Consumer @relation(fields: [consumerId], references: [id])
}

model Vote {
  id        String   @id @default(uuid())
  userId    String
  listingId String
  date      DateTime @default(now())
  type      VoteType @default(UP)
  listing   Listing  @relation(fields: [listingId], references: [id])
  user      Consumer @relation(fields: [userId], references: [id])
}

model ThriftList {
  id          String   @id @default(uuid())
  customerId  String
  description String
  isChecked   Boolean  @default(false)
  customer    Consumer @relation(fields: [customerId], references: [id])
}

model Category {
  id                    String                 @id @default(uuid())
  name                  String?                @unique
  top                   String?
  sub                   String?
  taxonomicPath         String?                @unique
  listings              CategoriesOnListings[]
  LiquidationThresholds LiquidationThreshold[]
  PricingRule           PricingRule[]
}

model CategoriesOnListings {
  id          String   @id @default(uuid())
  listingId   String
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  listing     Listing  @relation(fields: [listingId], references: [id])
  probability Decimal? @db.Decimal(10, 9)
}

model Listing {
  id                  String                 @id @default(cuid())
  mainImage           Json?
  brandImage          Json?
  dataSource          String?
  price               Decimal?
  cost                Decimal?
  delivery            String?
  tags                String[]
  status              StatusType             @default(SALE)
  isActive            Boolean                @default(true)
  createdAt           DateTime?              @default(now())
  updatedAt           DateTime?
  daysToExpiry        Int                    @default(7)
  businessId          String?
  Barcode             String
  brandImageUrl       String?
  mainImageUrl        String?
  isSyncedWithSquare  Boolean                @default(false)
  isTagged            Boolean                @default(false)
  isSyncedWithXimilar Boolean                @default(false)
  squareId            String?
  discountPercentage  Int?
  discountPrice       Decimal?
  memberPrice         Decimal?
  isPremiun           Boolean                @default(false)
  tinyUrl             String?                @unique
  categories          CategoriesOnListings[]
  Business            Business?              @relation(fields: [businessId], references: [id])
  votes               Vote[]
}

model ListingQueue {
  id       String          @id @default(uuid())
  ownerId  String          @unique
  owner    Business        @relation(fields: [ownerId], references: [id])
  listings QueuedListing[]
}

model QueuedListing {
  id              String           @id @default(uuid())
  queueId         String
  topCategory     String?
  mainCategory    String?
  subCategory     String?
  categoryPath    String?
  tags            String[]
  bucketPath      String?          @unique
  status          QueuedStatus     @default(QUEUED)
  queue           ListingQueue     @relation(fields: [queueId], references: [id])
  relatedProducts RelatedProduct[]
}

model RelatedProduct {
  id              String        @id @default(uuid())
  title           String?
  price           Decimal?
  thumbnail       String?
  queuedListingId String
  link            String?
  Listing         QueuedListing @relation(fields: [queuedListingId], references: [id])
}

model ReferenceListing {
  id         String   @id @default(uuid())
  bucketPath String?
  price      Int?
  categories String[]
  tags       String[]
}

model PricingRule {
  id            String              @id @default(uuid())
  name          String
  listingType   RepricingRuleType
  appliedTo     RepricingRuleApply?
  adjustPriceBy Int
  cycle         String
  roundTo       Float
  floorPrice    Int
  ruleType      RepricingRuleOption
  isRecurring   Boolean?
  daysOfWeek    String[]            @default([])
  saleStartDate DateTime?
  saleEndDate   DateTime?
  ownerId       String
  categoryId    String?
  category      Category?           @relation(fields: [categoryId], references: [id])
  owner         Business            @relation(fields: [ownerId], references: [id])
}

model LiquidationThreshold {
  id         String    @id @default(uuid())
  name       String
  days       Int
  ownerId    String
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  owner      Business  @relation(fields: [ownerId], references: [id])
}

model EmailPreferences {
  id                        String    @id @default(uuid())
  discountEmailReport       Boolean   @default(false)
  weeklyEmailReport         Boolean   @default(false)
  receiveTreasures          Boolean   @default(false)
  receiveNewlyListedPremium Boolean   @default(false)
  receiveRecurringDiscounts Boolean   @default(false)
  receiveOneTimeSpecials    Boolean   @default(false)
  businessId                String?   @unique
  consumerId                String?   @unique
  business                  Business? @relation(fields: [businessId], references: [id])
  consumer                  Consumer? @relation(fields: [consumerId], references: [id])
}

model PerformanceMetricsVariables {
  id                String   @id @default(uuid())
  sellThroughTarget Float
  aspTarget         Float
  businessId        String   @unique
  business          Business @relation(fields: [businessId], references: [id])
}

enum VoteType {
  UP
  DOWN
}

enum StatusType {
  SALE
  DISPOSED
  DAMAGED
  SOLD
}

enum QueuedStatus {
  QUEUED
  PROCESSING
  PROCESSED
}

enum RepricingRuleType {
  PREMIUM_ONLY
  EXCLUDE_PREMIUM
  ALL
}

enum RepricingRuleApply {
  ALL
  MEMBERS_ONLY
  EXCLUDE_MEMBERS
}

enum RepricingRuleOption {
  SALE
  STANDARD
}
