generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  onboardingComplete Boolean   @default(false)
  business Business?
  consumer Consumer?
}

model Business {
  id                      String       @id @default(uuid())
  user                    User         @relation(fields: [uid], references: [id])
  uid                     String       @unique
  businessName           String
  email                   String       @unique
  businessState          String
  businessCity           String
  businessStreet         String
  businessZip            String
  url                     String?
  phoneNumber            String?
  listings                Listing[]
  listingQueue ListingQueue?
}

model Consumer {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [uid], references: [id])
  uid             String   @unique
  username        String
  email           String   @unique
  emailAlertsOn Boolean  @default(true)
  votes Vote[]

}

model Vote {
  id String @id @default(uuid())
  user Consumer @relation(fields: [userId], references: [id])
  userId String
  listing Listing @relation(fields: [listingId], references: [id])
  listingId String
  date DateTime @default(now())
  type VoteType @default(UP)
}


model Category {
  id String @id @default(uuid())
  name String
  listings CategoriesOnListings []
}

model CategoriesOnListings {
  id String @id @default(uuid())
  listing Listing @relation(fields: [listingId], references: [id])
  listingId String
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
}



model Listing {
  id                String    @id @default(cuid())
  mainImage         Json?
  brandImage        Json?
  dataSource        String?
  price             Int?
  delivery          String?
  tags              String[]
  status StatusType @default(SALE)
  isActive Boolean @default(true)
  createdAt         DateTime? @default(now())
  updatedAt         DateTime?
  daysToExpiry Int @default(7)
  Business          Business? @relation(fields: [businessId], references: [id])
  businessId        String?
  Barcode String
  categories CategoriesOnListings[]
  votes Vote[]
}

enum VoteType {
  UP
  DOWN
}

enum StatusType {
  SALE
  DISPOSED
  DAMAGED
}

model ListingQueue {
  id String @id @default(uuid())
  owner Business @relation(fields: [ownerId], references: [id])
  ownerId String @unique
  Listings QueuedListing[]
}

model QueuedListing {
  id String @id @default(uuid())
  url String? @unique
  queue ListingQueue @relation(fields: [queueId], references: [id])
  queueId String
  topCategory String?
  mainCategory String?
  subCategory String?
  tags String[]
  relatedPrices String[]
}